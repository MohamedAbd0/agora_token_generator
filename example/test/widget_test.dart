// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:example/main.dart';

void main() {
  testWidgets('Agora Token Generator web app smoke test',
      (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const AgoraTokenGeneratorApp());

    // Set a larger viewport for better testing
    await tester.binding.setSurfaceSize(const Size(1200, 1000));
    await tester.pumpAndSettle();

    // Verify that the app loads with the correct title
    expect(find.text('Agora Token Generator'), findsOneWidget);

    // Verify that the main sections are present
    expect(find.text('Configuration'), findsOneWidget);
    expect(find.text('Generated Tokens'), findsOneWidget);
    expect(find.text('Token Information'), findsOneWidget);

    // Verify that form fields are present
    expect(find.text('App ID'), findsOneWidget);
    expect(find.text('App Certificate'), findsOneWidget);
    expect(find.text('Channel Name'), findsOneWidget);
    expect(find.text('UID'), findsOneWidget);
    expect(find.text('User Account'), findsOneWidget);
    expect(find.text('Expire Time (seconds)'), findsOneWidget);

    // Verify that the generate button is present
    expect(find.text('Generate Tokens'), findsOneWidget);

    // Verify that default values are pre-filled
    expect(find.text('970CA35de60c44645bbae8a215061b33'), findsOneWidget);
    expect(find.text('testChannel'), findsOneWidget);
    expect(find.text('12345'), findsOneWidget);
    expect(find.text('testUser'), findsOneWidget);
    expect(find.text('3600'), findsOneWidget);
  });

  testWidgets('Token generation test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const AgoraTokenGeneratorApp());

    // Set a larger viewport to avoid off-screen issues
    await tester.binding.setSurfaceSize(const Size(1200, 1000));
    await tester.pumpAndSettle();

    // Find the generate button specifically by its ElevatedButton type and icon
    final generateButton = find.byWidgetPredicate((widget) =>
        widget is ElevatedButton &&
        widget.child != null &&
        widget.child.toString().contains('Icon'));

    // Scroll down to make sure the generate button is visible
    await tester.dragUntilVisible(
      generateButton,
      find.byType(SingleChildScrollView),
      const Offset(0, -200),
    );
    await tester.pumpAndSettle();

    // Find and tap the generate tokens button
    await tester.tap(generateButton);
    await tester.pump();

    // Wait for the token generation animation to complete
    await tester.pumpAndSettle(const Duration(seconds: 2));

    // Verify that tokens are generated by checking if the loading message is gone
    expect(
        find.text('Click "Generate Tokens" to see results...'), findsNothing);
  });

  testWidgets('Token type selection test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const AgoraTokenGeneratorApp());

    // Set a larger viewport to avoid off-screen issues
    await tester.binding.setSurfaceSize(const Size(1200, 1000));
    await tester.pumpAndSettle();

    // Find the generate button specifically by its ElevatedButton type and icon
    final generateButton = find.byWidgetPredicate((widget) =>
        widget is ElevatedButton &&
        widget.child != null &&
        widget.child.toString().contains('Icon'));

    // Scroll down to make sure the generate button is visible
    await tester.dragUntilVisible(
      generateButton,
      find.byType(SingleChildScrollView),
      const Offset(0, -200),
    );
    await tester.pumpAndSettle();

    // Generate tokens first
    await tester.tap(generateButton);
    await tester.pumpAndSettle(const Duration(seconds: 2));

    // Find the dropdown button specifically in the Generated Tokens section
    final dropdown = find.byType(DropdownButtonFormField<int>);
    expect(dropdown, findsOneWidget);

    // Scroll to make the dropdown visible
    await tester.dragUntilVisible(
      dropdown,
      find.byType(SingleChildScrollView),
      const Offset(0, -200),
    );
    await tester.pumpAndSettle();

    // Tap the dropdown to open it
    await tester.tap(dropdown);
    await tester.pumpAndSettle();

    // Verify all token types are available in the dropdown menu
    expect(find.text('RTC Token (Account)'), findsWidgets);
    expect(find.text('RTC Token (UID=0)'), findsWidgets);
    expect(find.text('RTM Token'), findsWidgets);
    expect(find.text('Multi-Service Token'), findsWidgets);
  });
}
